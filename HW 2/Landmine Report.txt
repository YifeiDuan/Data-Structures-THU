A.算法的构思、原理与实现
算法的关键在于解决如何不重不漏地计数合法的矩形，首先长、宽值的组合分类是使不同矩形区别开并且便于计数不遗漏的变量，
但是在编程实现时还要考虑如何使计算机识别某个合法的特定长宽矩形是否已被计数，因此考虑再引入一个左上顶点来确保不重复。
一开始，对于土地网格信息的记录只是0/1，但是随后发现这样的话在计数时需要控制的条件太多太复杂，
因此变换思路，在录入土地网格信息时就将0/1值转化为向下连续1的累计值，便于从左上顶点出发搜寻时控制宽度条件。
这样一来，辅函数参数只需一行即可，因为要查找以该行中的点为左上顶点的矩形，所需信息全部包含在了这行数值记录中。
因此对于逐行逐列规定左上顶点进行查找这个逻辑，逐行部分在主函数中循环完成，逐列部分在辅函数中的外层循环完成。
而辅函数中对于每一个左上顶点，还要逐宽逐长查找矩形，因此又嵌套两层循环，在最内层通过一一累计的方式计算总数结果。
而且要注意合法的长宽同时受到nmax/mmax和矩形序列p(histograms[i])的规模这两组条件的约束，逐宽逐长中需要分别处理。

B.问题的认识与解决
第一次长度的限制方式只用了length和n比较，显然不行，因为最外层循环top一直在变，故而长度是在移动位置的长度。
后来出现了runtime error 11的问题，应当是主函数中histograms二维数组规模太大导致栈空间不足，于是改用全局变量。

C.时间空间复杂度估计
时间复杂度：土地信息录入的时间复杂度为mn，计数当中逐行逐列作为左上顶点也是mn，逐宽逐长则不超过mmax、nmax，
所以总时间复杂度为O(m*n*mmax*nmax)
空间复杂度：二维数组histograms[2001][2001]，一维数组tag[n+1]，n小于2000，故空间复杂度O（n + 2001*2001）