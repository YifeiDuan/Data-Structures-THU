A.算法的构思、原理与实现
处理这个问题主要要考虑输入和操作两部分。

在输入部分，由于每行长度不整齐，而且不同的首字母意味着不同类别的操作，
所以考虑使用switch语句来根据首字母决定后续处理方式。

在操作部分，由于不同操作类型都可能反复出现，为了划分清晰修改方便，于是用五个函数处理，
因为每个函数都涉及修改两个数组和num，result等值，故使用全局变量。
Close在时间复杂度上影响最大，是设计算法的关键，为了避免n很大时遍历staff数组修改code，
考虑使用mark数组来标记处于登陆状态的员工，从而在Close时只需修改num个员工的信息。
这要求mark已初始化元素下标连续，，为此在LogOut操作时也需要对mark数组进行num次修改，
一部分用于找到O的员工编号，一部分用于将其后的员工在mark中的位置前移。
其余的三种操作类型在实现逻辑上较为简单，直接修改相关变量即可。

B.问题的认识与解决
输入换行问题：在之前switch基础上处理，一开始在C，N输入后没有换行，导致提前输出，
后来各加入一句scanf("\n")即解决；同时，最后一次输入后仍有换行则无法结束，故最后一行单独输入。

复杂度问题：staff和mark全局数组需要尽量大，起初都设为n上限，后来意识到操作总次数不会多于m，
故mark可设为m上限，减少空间复杂度。

第10个测试样例在尝试各种修改后仍始终出现wrong answer情况，在换了两种思路分别重写程序后仍然如此
(两种思路分别是：1.开三个数组，其中两个key-value的关系对称，实现登入者和员工总体之间的校验环功能；
2.记录每个人的登陆操作输入的行数及close输入的行数，在close时无需遍历清零，而在query时，
根据其输入行数与最近一次close行数的关系确定是result直接-1还是读取staff[id])
从而怀疑可能是溢出或者int与longlongint间强制转换的问题，但是仍未找到问题。

C.时间空间复杂度估计
时间复杂度：两次memset分别相当于n,m阶循环，Close与LogOut操作用时都与此时的num一样，
最大为此前LogIn的操作数I，故总共m次操作的总用时应为Θ(2I)<Θ(2m)，总时间复杂度为Θ(n+3m)
空间复杂度：两个数组，空间复杂度O(n+m)